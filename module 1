// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AtokDonation {
    address public owner;
    uint public totalDonations;
    uint public constant MIN_DONATION = 100; // Minimum donation amount
    uint public minRefundAmount; // Minimum refund amount

    event Donated(address indexed from, uint amount);
    event Withdrawn(address indexed to, uint amount, string cause);
    event Refunded(address indexed to, uint amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
        minRefundAmount = 200; // Initial minimum refund amount
    }

    function donate() public payable {
        require(msg.value >= MIN_DONATION, "Minimum donation amount not met");
        totalDonations += msg.value;
        emit Donated(msg.sender, msg.value);
    }

    function withdraw(uint _amount, string memory cause) public onlyOwner {
        require(_amount <= totalDonations, "Insufficient donation balance");
        totalDonations -= _amount;
        bool success = payable(owner).send(_amount);
        require(success, "Withdrawal failed");
        emit Withdrawn(owner, _amount, cause);
    }

    function refundDonation(address payable _donor, uint _amount) public onlyOwner {
        require(_amount >= minRefundAmount && _amount <= totalDonations, "Invalid refund amount");
        totalDonations -= _amount;
        bool success = _donor.send(_amount);
        assert(success); // Assert if transfer fails
        emit Refunded(_donor, _amount);
    }

    function setMinRefundAmount(uint _newMinRefundAmount) public onlyOwner {
        require(_newMinRefundAmount > 0, "Minimum refund amount must be greater than 0");
        minRefundAmount = _newMinRefundAmount;
    }

    function getDonationBalance() public view returns (uint) {
        return totalDonations;
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    receive() external payable {
        if (msg.value > 0) {
            donate();
        }
    }

    // Custom assert function to handle exceptional cases
    function customAssert(bool _condition, string memory _message) internal pure {
        if (!_condition) {
            revert(_message);
        }
    }

    // Custom revert function to handle exceptional cases
    function customRevert(string memory _message) internal pure {
        revert(_message);
    }
}
