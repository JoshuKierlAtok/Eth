// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AtokDonation {
    address public owner;
    uint public totalDonations;
    uint public constant MIN_DONATION = 10; // Minimum donation amount

    event Donated(address indexed from, uint amount);
    event Withdrawn(address indexed to, uint amount, string cause);

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    function donate() public payable {
        require(msg.value >= MIN_DONATION, "Minimum donation amount not met");
        totalDonations += msg.value;
        emit Donated(msg.sender, msg.value);
    }

    function withdraw(uint _amount, string memory cause) public onlyOwner {
        require(_amount <= totalDonations, "Insufficient donation balance");
        totalDonations -= _amount;
        payable(owner).transfer(_amount);
        emit Withdrawn(owner, _amount, cause);
    }

    function getDonationBalance() public view returns (uint) {
        return totalDonations;
    }

    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    receive() external payable {
        if (msg.value > 0) {
            donate();
        }
    }
}
