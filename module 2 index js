import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);
  const [transactionHistory, setTransactionHistory] = useState([]);
  const [showAccount, setShowAccount] = useState(true);
  const [showBalance, setShowBalance] = useState(true);
  const [showTransactionHistory, setShowTransactionHistory] = useState(true);
  const [betAmount] = useState(3); // Updated bet amount to 3 ETH
  const [team, setTeam] = useState(null);
  const [winner, setWinner] = useState(null);
  const [timer, setTimer] = useState(null);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
    }

    if (ethWallet) {
      const account = await ethWallet.request({ method: "eth_accounts" });
      handleAccount(account);
    }
  };

  const handleAccount = (account) => {
    if (account.length > 0) {
      console.log("Account connected: ", account[0]);
      setAccount(account[0]);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
    handleAccount(accounts);

    // once wallet is set we can get a reference to our deployed contract
    getATMContract();
  };

  const getATMContract = () => {
    const provider = new ethers.providers.Web3Provider(ethWallet);
    const signer = provider.getSigner();
    const atmContract = new ethers.Contract(contractAddress, atmABI, signer);

    setATM(atmContract);
  };

  const getBalance = async () => {
    if (atm) {
      const balance = await atm.getBalance();
      setBalance(ethers.utils.formatEther(balance));
    }
  };

  const deposit = async () => {
    if (atm) {
      const tx = await atm.deposit({ value: ethers.utils.parseEther("1") });
      const receipt = await tx.wait();
      addTransactionToHistory("Deposit", 1, receipt);
      getBalance();
    }
  };

  const withdraw = async () => {
    if (atm) {
      const tx = await atm.withdraw(ethers.utils.parseEther("1"));
      const receipt = await tx.wait();
      addTransactionToHistory("Withdraw", 1, receipt);
      getBalance();
    }
  };

  const addTransactionToHistory = (type, amount, receipt) => {
    const newTransaction = {
      type,
      amount,
      timestamp: new Date().toLocaleString(),
      transactionHash: receipt.transactionHash,
      blockNumber: receipt.blockNumber,
      gasUsed: receipt.gasUsed.toString(),
    };
    setTransactionHistory([...transactionHistory, newTransaction]);
  };

  const toggleAccount = () => {
    setShowAccount(!showAccount);
  };

  const toggleBalance = () => {
    setShowBalance(!showBalance);
  };

  const toggleTransactionHistory = () => {
    setShowTransactionHistory(!showTransactionHistory);
  };

  const placeBet = (chosenTeam) => {
    if (balance < betAmount) {
      alert("Insufficient balance for this bet");
      return;
    }
    setTeam(chosenTeam);
    startTimer();
  };

  const startTimer = () => {
    setWinner(null);
    let timeLeft = 10;
    setTimer(timeLeft);

    const countdown = setInterval(() => {
      timeLeft -= 1;
      setTimer(timeLeft);

      if (timeLeft <= 0) {
        clearInterval(countdown);
        announceWinner();
      }
    }, 1000);
  };

  const announceWinner = async () => {
    const winnerTeam = Math.random() < 0.5 ? "Red" : "Blue";
    setWinner(winnerTeam);
    setTimer(null);

    // Update balance based on the result
    if (team === winnerTeam) {
      await atm.deposit({ value: ethers.utils.parseEther(betAmount.toString()) });
      addTransactionToHistory("Bet Win", betAmount, {
        transactionHash: "N/A",
        blockNumber: "N/A",
        gasUsed: "N/A",
      });
    } else {
      await atm.withdraw(ethers.utils.parseEther(betAmount.toString()));
      addTransactionToHistory("Bet Loss", betAmount, {
        transactionHash: "N/A",
        blockNumber: "N/A",
        gasUsed: "N/A",
      });
    }

    // Update balance immediately after the transaction
    getBalance();
  };

  const initUser = () => {
    // Check to see if user has Metamask
    if (!ethWallet) {
      return <p>Please install Metamask in order to use this ATM.</p>;
    }

    // Check to see if user is connected. If not, connect to their account
    if (!account) {
      return <button onClick={connectAccount}>Click here to open Atok's Cockfit fight</button>;
    }

    if (balance === undefined) {
      getBalance();
    }

    return (
      <div>
        {showAccount && <p>Your Account: {account}</p>}
        {showBalance && <p className="balance">Your Balance: {balance} ETH</p>}
        <button onClick={deposit}>Deposit 1 ETH</button>
        <button onClick={withdraw}>Withdraw 1 ETH</button>
        
        <button onClick={toggleAccount}>{showAccount ? "Hide Account Address" : "Show Account Address"}</button>
        <button onClick={toggleBalance}>{showBalance ? "Hide Balance" : "Show Balance"}</button>
        
        <h2>Transaction History</h2>
        {showTransactionHistory && (
          <ul>
            {transactionHistory.map((tx, index) => (
              <li key={index}>
                {tx.timestamp} - {tx.type} {tx.amount} ETH
                <br />
                Hash: {tx.transactionHash}
                <br />
                Block: {tx.blockNumber}
                <br />
                Gas Used: {tx.gasUsed}
              </li>
            ))}
          </ul>
        )}
        <button onClick={toggleTransactionHistory}>
          {showTransactionHistory ? "Hide Transaction History" : "Show Transaction History"}
        </button>
        
        <h2>Place Your Bet</h2>
        <button onClick={() => placeBet("Red")} disabled={timer !== null}>Bet 3 ETH on Red</button>
        <button onClick={() => placeBet("Blue")} disabled={timer !== null}>Bet 3 ETH on Blue</button>
        
        {timer !== null && <p>Time left: {timer} seconds</p>}
        {winner && <p>The winner is: {winner}</p>}
      </div>
    );
  };

  useEffect(() => {
    getWallet();
  }, []);

  useEffect(() => {
    if (atm && account) {
      getBalance();
    }
  }, [atm, account]);

  return (
    <main className="container">
      <header>
        <h1>Welcome to Atok's Cockfit fight</h1>
      </header>
      {initUser()}
      <style jsx>{`
        .container {
          text-align: center;
          padding: 20px;
        }
        .balance {
          font-size: 1.5em;
          margin: 20px 0;
        }
        button {
          margin: 10px;
        }
        @media (max-width: 600px) {
          .balance {
            font-size: 1.2em;
          }
        }
      `}</style>
    </main>
  );
}
